#!/usr/bin/env python
# vi: sw=4 ts=4:
#
# ---------------------------------------------------------------------------
#   Copyright (c) 2013-2015 AT&T Intellectual Property
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at:
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# ---------------------------------------------------------------------------
#
#
#    configuration file for havalet - valet processes monitoring tool.
#    group name is a logical process name.
#    properties MUST have the following properties:
#        'host'
#        'user'
#        'start'
#        'stop'
#        'test'
#
#    IMPORTANT:
#        "test" - MUST return a value != 0, this value should reflects
#            the monitored process priority.
#
#        "process's priority" - used for active/stand-by scenarios.
#            MUST be greater than 0 - lower number means higher priority.
#            e.g. instance which returns '1', as its response to "test" invocation,
#            will get precedence over instance which returns '2' as its priority.
#            priority 0 means thr process is down.
#
#        "stand_by_list" - OPTIONAL property. comma delimited hosts list.
#            used on active/stand-by scenarios.
#            ha_valet will attempt to restart the instance with the lower priority value,
#            only if the instance fails to start, ha_valet will try to restart the process
#            on the following host in the list.

[Ostro]
order=5
priority=2
host=valet2
user=attcloud
stand_by_list=valet1,valet2
start="ssh %s@%s 'cd @OSTRO_SERVER_DIR@ ; sudo python ./ostro_daemon.py start'" % (user, host)
stop="ssh %s@%s 'cd @OSTRO_SERVER_DIR@ ; sudo python ./ostro_daemon.py stop'" % (user, host)
test="ssh %s@%s 'exit $(cd @OSTRO_SERVER_DIR@ ; sudo python ./ostro_daemon.py status ; echo $?)'" % (user, host)

#[Allegro] - moved to supervisor
#order=4
#priority=1
#host=
#user=stack
#start="sudo python ~/allegro/valet_api/valet_api/wsgi.py &"
#stop="sudo pkill -f wsgi.py"
#test="netstat -na | grep 8090 | grep LISTEN | wc -l | exit $(awk \'{print $1}\')"

#:Music
#    order=3
#    priority=1
#    host=localhost
#    user=stack
#    port=8080
#    protocol=http
#    start="sudo service tomcat7 start"
#    stop="sudo service tomcat7 stop"
#    test="sudo wget -O /dev/null --server-response %s://%s:%s/MUSIC/rest/test 2>&1 | grep 'Content-Length' | exit $(awk '{print $2}')" % (protocol, host, port)
#   start="cd @TOMCAT_BIN_DIR@; sudo ./startup.sh"
#   stop="cd @TOMCAT_BIN_DIR@; sudo ./shutdown.sh"


#:ZK
#    order=2
#    priority=1
#    host=localhost
#    user=stack
#    port=
#    protocol=http
#    start="sudo @ZK_BIN_DIR@/zkServer.sh start"
#    stop="sudo @ZK_BIN_DIR@/zkServer.sh stop"
#    test="sudo @ZK_BIN_DIR@/zkServer.sh status | grep Mode | wc -l | exit $(awk '{print $1}')"


#:Cassandra
#    order=1
#    host=localhost
#    user=stack
#    port=
#    protocol=
#    start="sudo @CASSANDRA_BIN_DIR@/cassandra"
#    stop="pgrep -u %s -f cassandra | xargs kill -9" % (user)
#    test="ps -ef |grep CassandraDaemon | grep java | grep -v 'sh -c ps -ef' | wc -l | exit $(awk \'{print $1}\')"

